%\VignetteIndexEntry{Bivariate Probability Distributions}
\documentclass{article}
\usepackage[a4paper,top=2.6cm,bottom=3.6cm,left=3.6cm,right=3.6cm]{geometry}
\usepackage{parskip,verbatim,amsmath,amssymb,color}
\usepackage[nogin]{Sweave}
\pagestyle{myheadings}
\setlength{\parskip}{0.28cm}
\DefineVerbatimEnvironment{Sinput}{Verbatim}{xleftmargin=0.75em, formatcom=\color{rin}}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{xleftmargin=0.75em,formatcom=\color{rout}}
\DefineVerbatimEnvironment{Serror}{Verbatim}{xleftmargin=0.75em,formatcom=\color{rerr}}
\newcommand {\stitle}[3]
{	\title {\vspace {-0.6cm} {\normalsize #1 #2} \\[0.8cm] {\textbf {\huge #3} } }
	\author {\textbf {Abby Spurdle} }
	\maketitle
	\markright{Spurdle, A.\hfill #1 #2\hfill}
	\thispagestyle {empty}
}
\newcommand {\sabstract}[1]
{	\begin {center}
	\begin {minipage}{14.25cm}
		{\textsl {#1} }
	\end {minipage}
	\end {center}
	\vspace {0.06cm}
}
\definecolor{rin}{rgb}{0, 0, 0.32}
\definecolor{rout}{rgb}{0, 0.14, 0}
\definecolor{rerr}{rgb}{0.5, 0.025, 0}
\SweaveOpts{keep.source=TRUE}
\SweaveOpts{eps=FALSE}
\SweaveOpts{prefix.string=temp-bivariate}
\begin{document}

<<echo=false>>=
options(continue=" ")
options(SweaveHooks=list(fig=function()
par(mar=c(4.1, 4.1, 2.6, 1.6), cex=0.7, cex.main=1)))

set.seed (1)
@

\stitle {bivariate}{0.4.1}{Bivariate Probability Distributions}

\sabstract {Contains convenience functions for constructing, plotting and evaluating bivariate probability distributions, including their probability mass functions, probability density functions and cumulative distribution functions. Supports uniform (discrete and continuous), binomial, Poisson, categorical, normal, bimodal and Dirichlet (trivariate) distributions, and kernel smoothing and empirical cumulative distribution functions.}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Pre-Intro}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This package is based on function objects.

Some functions (constructors) return other functions (probability distributions), which can be evaluated.

This is equivalent but different to (a subset of) the d, p, q, r approach used in R's stats package.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Introduction}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This package contains convenience functions for constructing, plotting and evaluating bivariate probability distributions, including their probability mass functions, probability density functions and cumulative distribution functions.

It supports the following parametric probability distributions:
\begin {enumerate}
	\item \textbf {Discrete} bivariate \textbf {Uniform} distributions.
	\item Bivariate \textbf {Binomial} distributions.
	\item Bivariate \textbf {Poisson} distributions*.
	\item Bivariate \textbf {Categorical} distributions*.
	\item \textbf {Continuous} bivariate \textbf {Uniform} distributions.
	\item Bivariate \textbf {Normal} distributions*.
	\item Bivariate \textbf {Bimodal} distributions*.
	\item Trivariate \textbf {Dirichlet} distributions*.
\end {enumerate}

\newpage
And it supports the following nonparametric probability distributions:
\begin {enumerate}
	\item Bivariate \textbf {Kernel} density estimates*.
	\item Bivariate \textbf {Empirical} cumulative distribution functions*.
\end {enumerate}

Some of these distributions are simply the product of their marginal distributions. Others, marked with an * are not necessarily so.

In general, we can compute their probability mass function (PMF) or their probability density function (PDF), and their cumulative distribution function (CDF).

The functions for constructing probability distributions take some parameters and return functions which can be evaluated for x and y, except for kernel density estimates.

Note that discrete probability distributions convert their arguments to integers before evaluation.
 
The functions for plotting discrete distributions take a function object and can plot either a heat map or a 3d bar plot. Most of the functions for plotting continuous distributions take a function object and can plot either a contour plot or a 3d surface plot.

Refer to my barsurf package for information on how to customize plots, if required.

Note that my probhat package supports kernel smoothing, more generally.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Loading The Packages}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
I'm going to load (and attach) the intoo, bivariate and MASS packages.
<<>>=
library (intoo)
library (bivariate)
library (MASS)
@

Note that the bivariate package imports the intoo, barsurf, mvtnorm and KernSmooth packages.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Discrete Bivariate Uniform Distributions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
We can describe a bivariate uniform distribution as the product of two univariate uniform distributions.

We can construct its probability mass function using the dubvpmf() function. It takes four arguments, the a and b values of X and the a and b values of Y.
<<>>=
f = dubvpmf (1, 4, 1, 4)
@

We can print the function, however, I will give an example later.

Also, we can plot it.

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plot (f, TRUE)
@
\end {center}

To construct a cumulative distribution function, we can use the dubvcdf() function. It takes the same arguments as dubvpmf().

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
F = dubvcdf (1, 4, 1, 4)
plot (F, TRUE)
@
\end {center}

In both cases, we can evaluate the function for x and y.

<<>>=
f (1, 1)
@

The same applies to all the other probability distributions in this package, except for kernel density estimates.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Bivariate Binomial Distributions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
One way to describe a bivariate binomial distribution is to say that we have n trials. In each trial there are two independent events, each with a particular probability of success. Like flipping two coins, n times.

Like the bivariate uniform distribution, we can describe a bivariate binomial distribution as the product of two univariate binomial distributions with the same n parameter, so:
\begin {align*}
\mathbb {P} (X = x, Y = y) &= f_{X,Y} (x, y; p_X, p_Y, n)\\
&= f_X (x; p_X, n) f_Y (y; p_Y, n)\\
&= \bigg[ \binom {n}{x}p_X^x(1 - p_X)^{n-x} \bigg] \bigg[ \binom {n}{y}p_Y^y(1 - p_Y)^{n-y} \bigg]
\end{align*}

Where $p_X$ is the probability of the first success and $p_Y$ is the probability of the second success.

We can construct its probability mass function using the bnbvpmf() function. It takes three arguments, the probability of the first success, the probability of the second success and the number of trials.

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
f = bnbvpmf (0.5, 0.5, 20)
plot (f)
@
<<fig=TRUE, width=4.75, height=3>>=
plot (f, TRUE)
@
\end {center}

To construct a cumulative distribution function, we can use the bnbvcdf() function. It takes the same arguments as bnbvpmf().

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
F = bnbvcdf (0.5, 0.5, 20)
plot (F, TRUE)
@
\end {center}

Note that I've put the probabilities first, however, it's customary for the number of trials to be first.

If n is omitted, it defaults to one, giving a Bernoulli distribution.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Bivariate Poisson Distributions*}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Based on Karlis and Ntzoufras (2003), we can define the bivariate Poisson probability mass function as:
\begin {align*}
\mathbb {P} (X = x, Y = y) &= f_{X,Y} (x, y; \lambda_1, \lambda_2, \lambda_3)\\
&= e^{-(\lambda_1 + \lambda_2 + \lambda_3)} \frac{\lambda_1^x}{x!} \frac{\lambda_2^y}{y!} \sum_k \binom {x}{k} \binom {y}{k} k! \bigg( \frac{\lambda_3}{\lambda_1 \lambda_2} \bigg)^k
\end{align*}

Where $k$ is in $0$ to $\text {min} (x, y)$.

And where:\\
$\mathbb {E}(X) = \text {var}(X) = \lambda_1 + \lambda_3$\\
$\mathbb {E}(Y) = \text {var}(Y) = \lambda_2 + \lambda_3$\\
$\text {cov}(X, Y) = \lambda_3$

We can use the pbvpmf() or pbvpmf.2() functions.

The first takes three arguments, the three $\lambda$ parameters. The second also takes three arguments, but the mean of X, the mean of Y and the covariance between X and Y.

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
f = pbvpmf.2 (8, 8, 2)
plot (f)
@
<<fig=TRUE, width=4.75, height=3>>=
plot (f, TRUE)
@
\end {center}

To construct a cumulative distribution function, we can use the pbvcdf() or pbvcdf.2() functions. They take the same arguments as pbvpmf() and pbvpmf.2().

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
F = pbvcdf.2 (8, 8, 2)
plot (F, TRUE)
@
\end {center}

Note that $\lambda_1$ and $\lambda_2$ need to be greater than zero, which means that $\mathbb {E}(X)$ and $\mathbb {E}(Y)$ need to be greater than $\text {cov}(X, Y)$.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Bivariate Categorical Distributions*}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Bivariate categorical distributions are different to other probability distributions in this package. They are defined by a matrix of parameters (with either probabilities or frequencies), preferably with row and column names.
<<>>=
z = matrix (sample (1:16), 4, 4) / 136
rownames (z) = colnames (z) = c ("A", "B", "C", "D")
z
@

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
f = cbvpmf (z)
plot (f, TRUE)
@
\end {center}

Evaluation can use either integers or strings, and returns probabilities.
<<>>=
f (1, 2)
f ("A", "B")
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Continuous Bivariate Uniform Distributions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Continuous bivariate uniform distributions are similar to discrete bivariate uniform distributions. However, we have a probability density function instead of a probability mass function.

We can use the cubvpdf() function. It takes four arguments, the a and b values of X and the a and b values of Y.

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
f = cubvpdf (0, 2, 0, 2)
plot (f, TRUE)
@
\end {center}

To construct a cumulative distribution function, we can use the cubvcdf() function. It takes the same arguments as cubvpdf().

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plot (F, TRUE)
@
\end {center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Bivariate Normal Distributions*}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
We can construct a normal bivariate probability density function using the nbvpdf() or nbvpdf.2() functions, both of which use the dmvnorm() function from the mvtnorm package, and take five arguments.

The first takes the mean of X, the mean of Y, the standard deviation of X, the standard deviation of Y and their correlation. The second takes the mean of X, the mean of Y, the variance of X, the variance of Y and their covariance.

<<>>=
f = nbvpdf (0, 0, 1, 1, 0)
@

We can print the function.
<<>>=
f
@

And plot it.

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plot (f)
@

<<fig=TRUE, width=4.75, height=3>>=
plot (f, TRUE)
@
\end {center}

We can construct a cumulative distribution function using the nbvcdf() or nbvcdf.2() functions, both of which use the pmvnorm() function from the mvtnorm package, and take the same arguments as nbvpdf() and nbvpdf.2().
<<>>=
F = nbvcdf (0, 0, 1, 1, 0)
@

Once we have constructed our object we can plot it.

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plot (F)
@

<<fig=TRUE, width=4.75, height=3>>=
plot (F, TRUE)
@
\end {center}

Note that there's an appendix later that compares normal distributions with different parameters.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Bivariate Bimodal Distributions*}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Here, a bimodal distribution isn't an officially recognized distribution, however, it's still of interest.

One way to construct a bivariate bimodal probability density function is to construct two bivariate normal probability density functions, then add their densities together, and then divide by two.

We can construct such a probability density function using the bmbvpdf() or bmbvpdf.2() functions, both of which take eight arguments.

The first function takes the mean of X, the mean of Y, the standard deviation of X and the standard deviation of Y for the first component distribution, and the mean of X, the mean of Y, the standard deviation of X and the standard deviation of Y for the second component distribution. The second function is the same except we use variances instead of standard deviations.

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
f = bmbvpdf (3.5, 0, 1, 1, 6.5, 0, 1, 1)
plot (f, npoints=40)
@

<<fig=TRUE, width=4.75, height=3>>=
plot (f, TRUE, npoints=40)
@
\end {center}

We can construct a cumulative distribution function using the bmbvcdf() or bmbvcdf.2() functions. They take the same arguments as bmbvpdf() and bmbvpdf.2().

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
F = bmbvcdf (3.5, 0, 1, 1, 6.5, 0, 1, 1)
plot (F, npoints=40)
@

<<fig=TRUE, width=4.75, height=3>>=
plot (F, TRUE, npoints=40)
@
\end {center}

Note that this method is similar kernel smoothing, discussed later.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Trivariate Dirichlet Distributions*}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Dirichlet distributions with three variables are similar to other probability distributions with two variables.

We can construct one, using the dtvpdf() function, which takes three $\alpha$ parameters.

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
f = dtvpdf (2, 4, 6)
plot (f)
@

<<fig=TRUE, width=4.75, height=3>>=
plot (f, TRUE)
@
\end {center}

Or using the log density.

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plot (f, TRUE, log=TRUE)
@
\end {center}

Note that Dirichlet distributes can take a large variety of shapes.

I've provided some more examples in an appendix.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Bivariate Kernel Density Estimates*}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
We can construct bivariate kernel density estimates using the kbvpdf() function, which uses the bkde2D() function from KernSmooth. It has four arguments. The first two arguments are x and y vectors of data. The second two arguments are the bandwidths.

I've adapted the example from KernSmooth.
<<>>=
data ("geyser")
attach (geyser)
@

<<>>=
f = kbvpdf (duration, waiting, 0.7, 7)
@

Again, once we have constructed our object we can plot it.
\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plot (f, xlab="duration", ylab="waiting")
@

<<fig=TRUE, width=4.75, height=3>>=
plot (f, TRUE, xlab="duration", ylab="waiting")
@
\end {center}

<<>>=
detach (geyser)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Bivariate Empirical Cumulative Distribution Functions*}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Bivariate ECDFs are constructed in a similar way to bivariate kernel density estimates, except they give us a CDF rather than a PDF.

<<>>=
x = rnorm (20)
y = rnorm (20)
@

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
F = ebvcdf (x, y)
plot (F)
@

<<fig=TRUE, width=4.75, height=3>>=
plot (F, TRUE)
@
\end {center}

Note that if the number of observations is small, the function is plotted as a step function, evaluated over the observations, with an extrapolated region. However, if the number of observations is large, the function is plotted as a (continuous) surface, evaluated over a regularly spaced grid.

\newpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {References}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection* {R Packages}

Spurdle, A. (2019). intoo: Object Oriented Extensions.

Spurdle, A. (2019). barsurf: Bar, Surface and Related Plots.

Hothorn, T., Bretz, F., Genz, A., Mi, X. \& Miwa, T. (2018). mvtnorm: Multivariate Normal and t Distributions.

Ripley, B. \& Wand, M. (2015). KernSmooth: Functions for Kernel Smoothing Supporting Wand \& Jones (1995).

Spurdle, A. (2019). probhat: Generalized Kernel Smoothing.

Ripley, B. (2018). MASS: Support Functions and Datasets for Venables and Ripley's MASS.

\subsection* {Journal Articles}

Karlis, D. \& Ntzoufras, I. (2003). Analysis of sports data by using bivariate Poisson models.

\newpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Appendix A:\\Comparing Normal Distributions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
We can compare different normal distributions using different correlation or covariance parameters.

First, let's consider the bivariate distributions from the earlier section with zero correlation.

\begin {center}
<<>>=
f1 = nbvpdf (0, 0, 1, 1, 0)
f1 %$% matrix.variances
@

<<fig=TRUE, width=4.75, height=4>>=
plot (f1, all=TRUE)
@
\end {center}

Second, let's consider bivariate distributions with positive correlation.

\begin {center}
<<>>=
f2 = nbvpdf (0, 0, 1, 1, 0.75)
f2 %$% matrix.variances
@

<<fig=TRUE, width=4.75, height=4>>=
plot (f2, all=TRUE)
@
\end {center}

Third, let's consider bivariate distributions with negative correlation.

\begin {center}
<<>>=
f3 = nbvpdf (0, 0, 1, 1, -0.75)
f3 %$% matrix.variances
@

<<fig=TRUE, width=4.75, height=4>>=
plot (f3, all=TRUE)
@
\end {center}

Note that currently, the all=TRUE option requires the PMF or PDF rather than the CDF.

\newpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section* {Appendix B:\\Comparing Dirichlet Distributions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
$\boldsymbol \alpha = (1, 1, 1)$

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plot (dtvpdf (1, 1, 1), TRUE)
@
\end {center}

$\boldsymbol \alpha = (2, 2, 2)$

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plot (dtvpdf (2, 2, 2), TRUE)
@
\end {center}

$\boldsymbol \alpha = (0.5, 0.5, 0.5)$

\begin {center}
<<fig=TRUE, width=4.75, height=3>>=
plot (dtvpdf (0.5, 0.5, 0.5), TRUE)
@
\end {center}

\end {document}
